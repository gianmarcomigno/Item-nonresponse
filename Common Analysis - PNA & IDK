#In the first part of the code, the data are imported and both the participants and the relevant variables of interest have been subset.

# Import libriaries
libraries <- c("data.table", "reshape2", "ggplot2", "plotly", "spatstat", 
               "stringr", "plyr", "dplyr", "psych", "GPArotation", "lavaan", 
               "car", "tidyverse", "tidylog", "RColorBrewer", "dichromat")
lapply(libraries, require, character.only = TRUE)

# Reading Phenotype file
d <- fread("neale_lab_parsed.tsv", header=T)
colnames(d) <- paste0("f.",gsub("x","",gsub("_",".",colnames(d))))

# Read in the sample and subsetting, excluding those who gave no permission
sample <- read.table("ukb31063.gwas_samples.both_sexes.txt", header = TRUE)
s1 <- read.csv('w31063_20181016.csv')
s2 <- setdiff(sample$s,s1$X1142430)

# Subsetting Variables - only those asked to every participant. NB only f.X.0.0 are included.
keep <- c("f.userId","f.54.0.0","f.20116.0.0","f.21000.0.0","f.670.0.0","f.6139.0.0","f.699.0.0","f.6142.0.0","f.6138.0.0","f.864.0.0",
          "f.884.0.0","f.904.0.0","f.1031.0.0","f.6160.0.0","f.1050.0.0","f.1060.0.0","f.1070.0.0","f.1080.0.0","f.1090.0.0",
          "f.1100.0.0","f.1110.0.0","f.1160.0.0","f.1170.0.0","f.1180.0.0","f.1190.0.0","f.1200.0.0","f.1210.0.0","f.1220.0.0",
          "f.1239.0.0","f.1289.0.0","f.1299.0.0","f.1309.0.0","f.1319.0.0","f.1329.0.0","f.1339.0.0","f.1349.0.0","f.1359.0.0",
          "f.1369.0.0","f.1379.0.0","f.1389.0.0","f.6144.0.0","f.1418.0.0","f.1428.0.0","f.1438.0.0","f.1458.0.0","f.1478.0.0",
          "f.1488.0.0","f.1498.0.0","f.1518.0.0","f.1528.0.0","f.1538.0.0","f.1548.0.0","f.1558.0.0","f.1647.0.0","f.1677.0.0",
          "f.1687.0.0","f.1697.0.0","f.1707.0.0","f.1717.0.0","f.1727.0.0","f.1737.0.0","f.1747.0.0","f.1757.0.0","f.1767.0.0",
          "f.1920.0.0","f.1930.0.0","f.1940.0.0","f.1950.0.0","f.1960.0.0","f.1970.0.0","f.1980.0.0","f.1990.0.0","f.2000.0.0",
          "f.2010.0.0","f.2020.0.0","f.2030.0.0","f.2040.0.0","f.2050.0.0","f.2060.0.0","f.2070.0.0","f.2080.0.0","f.2090.0.0",
          "f.2100.0.0","f.2110.0.0","f.6149.0.0","f.2129.0.0","f.2178.0.0","f.2188.0.0","f.6146.0.0","f.2207.0.0","f.2227.0.0",
          "f.2267.0.0","f.2277.0.0","f.2296.0.0","f.2306.0.0","f.2316.0.0","f.6145.0.0","f.6159.0.0","f.2335.0.0","f.2345.0.0",
          "f.6150.0.0","f.6152.0.0","f.2443.0.0","f.2453.0.0","f.2463.0.0","f.2473.0.0","f.2492.0.0","f.6154.0.0","f.6155.0.0",
          "f.2247.0.0","f.6179.0.0","f.2237.0.0", "f.53.0.0")

# Subsetting partecipants, excluding pilot-study predecessors
d1 <- d[d$f.userId %in% s2, keep, with=FALSE]
d1 <- d1[d1$f.53.0.0 > "2007-01-01",]
d1 <- d1[,!"f.53.0.0"]

# Remove partecipants with too many NAs
var_miss <- data.frame(xvar = names(colSums(is.na(d1))),
                       yvar = colSums(is.na(d1)))
var_miss_num <- var_miss[var_miss$yvar==max(colSums(is.na(d1))),]$xvar

completeFun <- function(data, desiredCols) {
  completeVec <- complete.cases(data[, desiredCols, with = F])
  return(data[completeVec, ])}

alldata<- completeFun(d1, var_miss_num)

########################################################
#                    CHECKPOINT 1                      #
########################################################
saveRDS(alldata, file = 'alldata.rds')
#write.csv(alldata, file = "alldata.csv")
alldata <- readRDS('alldata.rds', refhook = NULL) 
alldata <- alldata[,-1]

# Adding labels to variables, to include the UserID = "f.1.0.0"
names(alldata)[1] <- "f.1.0.0"
infos <- rbind(infos, data.frame("FieldID" = 1, "Field" = "UserID",stringsAsFactors = TRUE))

# Read in Uk Biobank info and adding labels
info <- read.csv('Data_Dictionary_Showcase.csv')
infos <- info[c(grep("UK Biobank assessment centre",info$Field), grep("Touchscreen", info$Path)),c("FieldID","Field")]

lab_vec <- infos[paste0("f.",infos$FieldID,".0.0") %in% colnames(alldata),c("Field","FieldID")]
labvec <- lab_vec[match(names(alldata), paste0("f.",lab_vec$FieldID,".0.0")),]

colnames(alldata) <- lab_vec[match(colnames(alldata), paste0("f.",lab_vec$FieldID,".0.0")),]$Field

# Variables' information
# Type: C = Categorical, O = Ordinal, N = Numeric Integer. Multiple Instances: 1 = yes, 0 = no. Progressive.code: code in the survey
vars_info <- read.table(file = 'vars_info.tsv', sep = '\t', header = TRUE)

########################################################
#                 USEFUL FUNCTIONS                     #
########################################################

# Create interactive plots (Correlation matrix, residuals..) - Heatmap
interactive_matrix <- function(matr, main = 'Interactive Matrix', scale = 'Scale'){
  library(reshape2)
  library(ggplot2)
  library(plotly)
  
  reorder_cormat <- function(cormat){
    dd <- as.dist((1-cormat)/2)
    hc <- hclust(dd)
    cormat <-cormat[hc$order, hc$order]}
 
  cormat <- reorder_cormat(matr)
  
  # remove if want full matrix
  get_lower_tri<-function(cormat){
    cormat[upper.tri(cormat)] <- NA
    return(cormat)}
  #lower_tri <- get_lower_tri(cormat)
  #melted_cormat <- melt(lower_tri, na.rm = TRUE)
  
  melted_cormat <- melt(cormat, na.rm = TRUE) #use for full matrix
  
  ggheatmap1 <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
    geom_tile(color = "white")+
    scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                         midpoint = 0, limit = c(-1,1), space = "Lab", 
                         name=scale) +
    #scale_fill_gradient2(low = "white", high = "red", 
    #                     limit = c(0,1),
    #                     name=scale) +
    theme(axis.text.x= element_blank()) +
    theme(axis.text.y = element_blank()) +
    labs(title= main)
  
  return(ggplotly(ggheatmap1))
}

# Read in results genetic correlation rg (without c(2734, 2774, 2784, 20001_1002) since not found) and merge with heritable variables info
out_matrix_rg <- function(name_file){
  library(plyr)
  matrix <- read.csv(file=name_file, header=TRUE, sep=",")
  heritable_var <- read.csv("ukb31063_h2part_z4_reduced.csv", header=TRUE)
 
  heritable_var_sub <- heritable_var[,c("phenotype","description")]
  matrix_sub <- matrix[,c("p2","rg","z","p")]
  colnames(matrix_sub) <- c("phenotype","rg","z","p")
  # Prepare name for join
  matrix_sub$phenotype <- gsub('"',"",gsub('^.|.$', '', gsub('^.*pheno\\s*|\\s*ldsc.*$', '', matrix_sub$phenotype)))
  
  join1 <- join(matrix_sub,heritable_var_sub,by="phenotype",type = "left")
  #join2 <- join1[order(join1$rg, decreasing = T),]
}

# Manhattan plot
manhattan_plot <- function(name_file, col = c("gray10", "gray60"), title='title'){
  library(plyr)
  library(qqman)
  rsid <- read.table(file = 'rsid.tsv.bgz', sep = '\t', header = TRUE)
  gwas1 <- read.table(file = name_file, sep = '\t', header = TRUE)
  
  #gwas1[gwas1$pval<5e-06,] # SNPs significative
  colnames(gwas1) <- c("rsid",  "A1",   "A2",   "N",    "Z",    "beta", "se",   "pval")
  gwas_exp <- join(gwas1,rsid,by="rsid",type = "left")
  
  BP <- as.numeric(as.character(gsub(".*:","",as.character(gwas_exp$locus))))
  CHR <- as.numeric(as.character(gsub(":.*","",as.character(gwas_exp$locus))))
  
  gwas_exp_1 <- as.data.frame(cbind(cbind(BP, CHR), as.numeric(as.character(gwas_exp$pval)), as.character(gwas_exp$rsid)))
  gwas_exp_1 <- as.data.frame(cbind(as.numeric(BP), as.numeric(CHR), as.numeric(as.character(gwas_exp$pval)), as.character(gwas_exp$rsid)))
  
  colnames(gwas_exp_1) <- c("BP", "CHR", "P", "SNP")
  gwas_exp_1$CHR <- as.numeric(as.character(gwas_exp_1$CHR))
  gwas_exp_1$BP <- as.numeric(as.character(gwas_exp_1$BP))
  gwas_exp_1$P <- as.numeric(as.character(gwas_exp_1$P))
  #head(gwas_exp_1)
  
  h <- gwas_exp_1 %>% filter(-log10(P)>1)
  #col = colors()[grep("green",colors())]
  #col = sort(colors()[grep("sky",colors())])
  #col = c("springgreen4", "darkolivegreen", "forestgreen","yellowgreen"))
  #col= c("#C7E9C0", "#A1D99B", "#74C476", "#41AB5D", "#238B45", "#006D2C", "#00441B")) 
  qqman::manhattan(h, chr="CHR", bp="BP", p="P", snp = "SNP",suggestiveline = F, 
                   annotatePval = 5e-8, col = col, title=title)
} 

########################################################
#         COMPARE UNADJUSTED AND ADJUSTED rg           #
########################################################
# read in file to make volcano plot with unadjusted rg
install.packages("ggrepel")
install.packages("gridExtra")
install.packages("grid")
install.packages("ggplot2")

library(grid)
library(ggrepel)
library("gridExtra")
library(ggplot2)

pna_idk <- read.csv("pna_idk_comparison.csv")
names(pna_idk$Traits[c(6,31, 17, 13)]) <- c("Educational Attainment", "Loneliness", "Low self rated health", " Schizophrenia")
levels(pna_idk$Traits)[c(16,22,36,30)] <- c("Educational Attainment", "Loneliness", "Low self rated health", " Schizophrenia")


# WARNING (no correct colnames): pna adj it's in fact unadj, for idk it's correct
ggplot(pna_idk, aes(x=rg_pna_unadj, y=-log10(pvalue_rg_pna_unadj))) +
  geom_point(aes(x=rg_pna_unadj, y=-log10(pvalue_rg_pna_unadj)))

limits <- c(-100,85)
breaks <- seq(limits[1], limits[2], by=20)

p1 <- ggplot(pna_idk, aes(x=rg_pna_adj, y=-log10(pvalue_rg_pna_adj), size=1.8)) +
  geom_point() +
  xlim(limits=c(-.55,.55)) +
  ylim(limits=c(0,90)) +
  theme_bw() +
  xlab("Genetic correlation PNA") + ylab("-Log10(p-value)") +
  theme (legend.position = "none",
         axis.text=element_text(size=11), 
         axis.title=element_text(size=14,face="bold")) +
  geom_text_repel(data = subset(pna_idk, -log10(pvalue_rg_pna_adj)>20 | -log10(pvalue_rg_pna_adj) > 9.459 & -log10(pvalue_rg_pna_adj) < 9.46),
                    aes(rg_pna_adj,-log10(pvalue_rg_pna_adj),label=Traits),
                    nudge_y = 10,
                    direction = "x")
    
p2 <- ggplot(pna_idk, aes(x=rg_idk_unadj, y=-log10(pvalue_rg_idk_unadj),  size=1.8)) +
  geom_point() +
  theme_bw() +
  xlim(limits=c(-.55,.55)) +
  ylim(limits=c(0,90)) +
  xlab("Genetic correlation IDK") + ylab("-Log10(p-value)") +
  theme (legend.position = "none",
         axis.text=element_text(size=11), 
         axis.title=element_text(size=14,face="bold")) +
      geom_text_repel(data = subset(pna_idk, -log10(pvalue_rg_idk_unadj)>22 | -log10(pvalue_rg_idk_unadj) > 0.24 & -log10(pvalue_rg_idk_unadj) < 0.25),
                  aes(rg_pna_adj,-log10(pvalue_rg_idk_unadj),label=Traits),
                  nudge_y =-1,
                  direction = "x")

grid.arrange(p1, p2, ncol=2, top = textGrob("Genetic correlation IDK/PNA with other traits",
                                           gp=gpar(fontsize=20,font=2)))
