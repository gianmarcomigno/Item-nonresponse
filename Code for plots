################################################################
# figure_pna_idk_items
################################################################
alldata <- readRDS('alldata.rds', refhook = NULL)

# scatterplot pna  (highest dot: 18 top, 25 second)
pna <- alldata %>% select(-f.userId, -f.54.0.0, -f.2129.0.0) %>%
  mutate_all(funs(ifelse(.==-3,1,0))) %>% 
  summarise_each(funs(sum)) %>%
  t %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  mutate(V1= V1/360628, # proportion
         z=1:n(),
         lab = c('First Question',rep(' ',82),'Last Question',rep(' ',25)),
         label = c(rep(' ',17),'1',rep(' ',6),'2',rep(' ',84)))

# adorn_totals("col") --> rowSums

# negative binomial regression: describe the probabilities of occurrance of whole number >= 0, no necessary mean=var of poisson ~
pna_bin <- pna %>% select(-rowname, -lab) %>%
  mutate(V1 = V1*360628)

library(MASS) # unloadNamespace("MASS")

nbGLM_pna <- glm.nb(V1 ~ z, pna_bin)
summary(nbGLM_pna)
# for each one-unit increase in question, the expected log count of the number of pna decreases by 0.006
nbGLM_pna$model$fitted <- predict(nbGLM_pna, type = "response")/360628
t.test(predict(nbGLM_pna, type = "response")/360628, mu=0, alternative="less")


p1 <- ggplot(pna, aes(x=factor(z), y=V1)) + 
  geom_point(shape=18, size=4) + 
  #geom_text(aes(label=ifelse(V1>.7, as.character(rowname),'')),hjust=-.02,vjust=0.4,size=5) +
  xlab("") +
  ylab('Proportion of participants who chose "Prefer not to answer"') +
  scale_x_discrete(breaks= pna$z, labels = pna$lab) +
  scale_y_continuous(trans = log10_trans(),
                     labels = function(x) format(x, scientific = FALSE,
                                                 drop0trailing = T), # labels=comma
                     limits = c(10^-4,1)) +
  annotation_logticks(sides = 'l') +
  theme(legend.position="none",
        plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold"),
        axis.ticks=element_blank(),
        panel.border = element_blank(),
        axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "black"),
        axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "black"),
        axis.text.x=element_text(size=15,hjust=0,vjust=0.2)) +
  ggtitle("a") +
  geom_point(data = nbGLM_pna$model, aes(factor(z), fitted), shape = '-', size = 6) +
  geom_text(aes(label=label),hjust=-.5, vjust=-.5)

  #labs(title = 'Number of "Prefer not to answer" per variable', subtitle = 'Mean: 584 (SE=891)') +
  #geom_smooth(aes(x=factor(z), y=V1*360628), method = "glm.nb", colour="black", size=0.5)  # P: coef(summary(glm(pna$V1 ~ pna$z)))[,4] ---> NOT WORKING SINCE NOW Z IS FACTOR 

# select only those with the idk option (top:44, second:39)
not_idk <- c(names(which(colSums(alldata==-1)==0)))
idk <- alldata %>% dplyr::select(-not_idk, -f.1647.0.0) %>%
  mutate_all(funs(ifelse(.==-1,1,0))) %>%
  summarise_each(funs(sum)) %>%
  t %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  mutate(V1= V1/360628, # percentage
         z=1:n(), 
         lab = c('First Question',rep(' ',60),'Last Question',rep(' ',21)),
         label = c(rep(' ',38),'3',rep(' ',4),'4',rep(' ',39)))

idk_bin <- idk %>% 
  mutate(V1 = V1*360628)

nbGLM_idk <- glm.nb(V1 ~ z, idk_bin)
summary(nbGLM_idk)
nbGLM_idk$model$fitted <- predict(nbGLM_idk, type = "response")/360628
# test for increase log(count)
t.test(predict(nbGLM_idk, type = "response")/360628, mu=0, alternative="less")

p2 <- ggplot(idk, aes(x=factor(z), y=V1)) + 
  geom_point(shape=18, size=4) + # shape=18, 
  xlab("") +
  ylab('Proportion of participants who chose "I don\'t know"') +
  scale_x_discrete(breaks= idk$z, labels = idk$lab) +
  scale_y_continuous(trans = log10_trans(),
                     labels = function(x) format(x, scientific = FALSE,
                                                 drop0trailing = T), # labels=comma
                     limits = c(10^-4,1)) +
  annotation_logticks(sides = 'l') +
  theme(legend.position="none",
        plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold"),
        axis.ticks=element_blank(),
        panel.border = element_blank(),
        axis.line.x = element_line(size = 0.5, linetype = "solid", colour = "black"),
        axis.line.y = element_line(size = 0.5, linetype = "solid", colour = "black"),
        axis.text.x=element_text(size=15,hjust=0,vjust=0.2)) +
  ggtitle("b") +
  #labs(title = "title", tag = "A") +      # <------- this is for letters at top!!
  geom_point(data = nbGLM_idk$model, aes(factor(z), fitted), shape = '-', size = 6) +
  geom_text(aes(label=label),hjust=-.5, vjust=-.5)
  #geom_abline(intercept = nbGLM_idk$coefficients[1]/360628, slope = nbGLM_idk$coefficients[2])

grid.arrange(p1, p2, ncol=2, widths=c(2.1/4, 1.9/4)) #export A4 landscape (8x25 inches)

################################################################
# figure_tetra_pna_idk
################################################################
alldata <- readRDS('alldata.rds', refhook = NULL)
# Create tetrachoric matrix
not_idk <- c(names(which(colSums(alldata==-1)==0)))
idk_tetra <- alldata %>% dplyr::select(-not_idk, -f.1647.0.0) %>%
  mutate_all(funs(ifelse(.==-1,1,0))) %>%
  tetrachoric %>%
  extract2(1) %>% 
  as.data.frame

plot(eigen(idk_tetra)$values[1:15], type = "l")
abline(h=1, col = "red", lty = 2)

idk_tetra %>% .[upper.tri(.)] %>% IQR # IQR

#pna_tetra <- alldata %>% dplyr::select(colnames(idk_tetra)) %>%
pna_tetra <- alldata %>% select(-f.userId, -f.54.0.0, -f.2129.0.0) %>%
  mutate_all(funs(ifelse(.==-3,1,0))) %>%
  tetrachoric %>%
  extract2(1) %>%
  as.data.frame

plot(eigen(pna_tetra)$values[1:15], type = "l")
abline(h=1, col = "red", lty = 2)

new <- matrix(0, nrow = 83, ncol = 83)
new[lower.tri(new)] <- idk_tetra[lower.tri(idk_tetra)]
new[upper.tri(new)] <- pna_tetra[upper.tri(pna_tetra)]
rownames(new) <- colnames(new) <- colnames(pna_tetra)

stats_idk <- alldata %>% select(colnames(idk_tetra)) %>%
  mutate_all(funs(ifelse(.==-3,1,0)))

###############################
#           PNA               #
###############################
# subsetting food (1289 --> 1548) and mental (1920 --> 2110)
food <- alldata %>% select(-f.userId, -f.54.0.0, -f.2129.0.0) %>%
  mutate_all(funs(ifelse(.==-3,1,0))) %>%
  select(28 : 50)

mental <- alldata %>% select(-f.userId, -f.54.0.0, -f.2129.0.0) %>%
  mutate_all(funs(ifelse(.==-3,1,0))) %>%
  select(63 : 82)

# correlation between clusters: 
IQR(cor(mental, food))
# correlation within clusters
food %>% 
  tetrachoric %>%
  extract2(1) %>%
  as.data.frame %>%
  .[lower.tri(.)] %>%
  mean

mental %>% 
  tetrachoric %>%
  extract2(1) %>%
  as.data.frame %>%
  .[lower.tri(.)] %>%
  mean

# health: 2178/88, 2296, 2306, 2316 fino 2247. 16 items
pna_tetra %>% select(68 : 83) %>%
  slice(68 : 83) %>%
  as.matrix %>%
  mean

#IDK
# mental health: 1920 --> 2110. 20 items
idk_tetra %>% select(48 : 67) %>%
  slice(48 : 67) %>%
  as.matrix %>%
  mean
# food: 1289 --> 1548. 19 items
idk_tetra %>% select(20 : 38) %>%
  slice(20 : 38) %>%
  as.matrix %>%
  mean
# health: 2178/88, 2296, 2306, 2316 fino 2247. 16 items
idk_tetra %>% select(68 : 83) %>%
  slice(68 : 83) %>%
  as.matrix %>%
  mean
mean(c(0.379518, 0.5556611, 0.3217849)) # 0.42 vs 0.3


# plot heatmap tetrachoric correlation with the questions in common
melted_cormat <- melt(new, na.rm = F)

ggplot(data = melted_cormat, aes(x=Var2, y=Var1, fill = value))+
  geom_tile(color = "black")+
  scale_fill_gradient2(low = "blue", high = "darkgreen", mid = "white", 
                       midpoint = 0, space = "Lab", name='', breaks=c(-1,-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1),
                       limits=c(-1,1)) +
  #scale_fill_discrete(name = melted_cormat$value, labels = c("A", "B", "C"))
  theme(axis.text.x= element_blank(),
        axis.text.y = element_blank(),
        axis.line.x = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks=element_blank(),
        legend.position='right',
        legend.key.size = unit(2.5, "cm"),
        legend.key.width = unit(.8, "cm"))  +
  xlab('Questions answered "Prefer not to answer"') +
  # "question answered IDK"
  ylab('Questions answered "I don\'t know"')


################################################################
# figure_corr_phen_vs_genot
################################################################
# as a reference: https://github.com/Nealelab/ldsc/wiki/Visualizing-correlations
# import rg bi-factor pna_idk manually  rg_factor_bi_factor_pna_idk_Foglio1
rg_factors_idk_pna <- rg_factor_bi_factor_pna_idk_Foglio1 %>%    #rg_factor_bi_factor_pna_idk_Foglio1
  select(p1, p2, rg, p) %>%
  na.omit %>%
  mutate(p1 = gsub("\\..*", "",gsub("^([^_]*_[^_]*_)", "", p1)),
         p2 = gsub("\\..*", "",gsub("^([^_]*_[^_]*_)", "", p2)))
         #sig = ifelse(p < 0.01, ifelse(p < 0.001, "**", "*"), ""))
  #dcast(p1 ~ p2, value.var="rg") # to rebuild the corr matrix

pvalue_rg <- rg_factors_idk_pna %>% select(rg, p)

xx <- matrix(1, nrow=9, ncol=9) 
xx[lower.tri(xx)] <- rg_factors_idk_pna$rg

colnames(xx) <- rownames(xx) <- c(unique(rg_factors_idk_pna$p1),unique(rg_factors_idk_pna$p2)[8])

# mean genetic correlation:
xx %>% as.data.frame %>% .[lower.tri(.)] %>% IQR

# add rg to matrix 
factscores_IDK <- as.data.frame(readRDS(file = "factscores_IDK.rds"))
factscores_PNA <- as.data.frame(readRDS(file = "factscores_PNA.rds"))

phen_corr <- cbind(factscores_IDK,factscores_PNA) %>%
  set_colnames(c("IDK_g", "IDK_neuroticism", "IDK_lifestyle", "IDK_health",
                 "PNA_g", "PNA_socialstatus", "PNA_health", "PNA_ethnicity", "PNA_neuroticism")) %>%
  select(colnames(xx)) %>%
  #mutate_all(scale) %>%  # not necessary
  correlate %>%
  select(-rowname) %>%
  as.data.frame

# get pvalue factor scores correlation:
fact_score <-cbind(factscores_IDK,factscores_PNA) %>%
  set_colnames(c("IDK_g", "IDK_neuroticism", "IDK_lifestyle", "IDK_health",
                 "PNA_g", "PNA_socialstatus", "PNA_health", "PNA_ethnicity", "PNA_neuroticism")) %>%
  select(colnames(xx)) %>%
  corr.test(adjust = "bonferroni")

pvalue_r2 <- cbind(melt(fact_score$r[upper.tri(fact_score$r)]), melt(fact_score$p[upper.tri(fact_score$p)])) %>% 
  set_colnames(c("r", "p")) 

# cor.test(col1,col2) for significance
cor.test(factscores_PNA$f1,factscores_IDK$f3)  #pna social idk health


xx[upper.tri(xx)] <- phen_corr[upper.tri(phen_corr)]

# mean phenotypic correlation:
xx %>% as.data.frame %>% .[upper.tri(.)] %>% mean

# final plot
# https://stackoverflow.com/questions/12196756/significance-level-added-to-matrix-correlation-heatmap-using-ggplot2: to add * for significance
xx <- xx %>% 
  set_colnames(c("IDK General Factor", "IDK Health", "IDK Lifestyle", "IDK Psychiatric", 
                 "PNA Ethnicity", "PNA General Factor", "PNA Health",  "PNA Psychiatric", "PNA Socioeconomic\nStatus")) %>%
  `rownames<-`(c("IDK General Factor", "IDK Health", "IDK Lifestyle", "IDK Psychiatric", 
                 "PNA Ethnicity", "PNA General Factor", "PNA Health",  "PNA Psychiatric", "PNA Socioeconomic\nStatus"))

melted_cormat <- melt(xx, na.rm = F)

# significance * on plot: https://stackoverflow.com/questions/52170392/r-add-significance-stars-to-correlation-matrix-heat-map
colnames(pvalue_r2) <- c('value','p')
pvalue_rg <- as.data.frame(pvalue_rg)
colnames(pvalue_rg) <- c('value','p_rg')

melted_cormat <- melted_cormat %>%
  full_join(.,pvalue_r2) %>%
  left_join(., pvalue_rg) 

melted_cormat$p.value <- coalesce(melted_cormat$p_rg,melted_cormat$p)

melted_cormat <- melted_cormat %>%
  select(-p,-p_rg)

melted_cormat$stars <- cut(melted_cormat$p.value, breaks=c(-Inf, 0.001, 0.01, 0.05, Inf), 
                           label=c("***", "**", "*", ""))  # Create column of significance labels

ggplot(data = melted_cormat, aes(x=Var2, y=Var1, fill = value))+
  geom_tile(color = "black")+
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", name='', breaks=c(-1,-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1),
                       limits=c(-1,1)) +
  theme(axis.text.x = element_text(angle = -90, hjust=0),
        axis.line.x = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks=element_blank(),
        legend.position='right',
        plot.title = element_text(hjust = 0.5),
        legend.key.size = unit(2.5, "cm"),
        legend.key.width = unit(.8, "cm"))  +
  geom_text(aes(label=stars), color="black", size=5) +
  xlab('Phenotypic Correlation') +
  ylab('Genetic Correlation') 
  #ggtitle("Phenotypic Correlation")
  #scale_x_discrete(position = "top") # axis text on top

#grid.locator(unit="native")
bottom_y <- 265
grid.brackets(189, bottom_y,   405, bottom_y, lwd=2, col="red")
grid.brackets(405, bottom_y,  676, bottom_y, lwd=2, col="red")

xx %>%
  t %>%
  network_plot(min_cor = .1)


# https://tidymodels.github.io/corrr/index.html corrr package for cool pack correlation


################################################################
# volcano plot idk and pna phenotypes with heritable traits
################################################################
# load in both the h2part file and the file with the rg of pna and idk
heritable_var <- read_delim("ukb31063_h2part_z4_reduced.csv", ";", 
                            escape_double = FALSE, trim_ws = TRUE) %>%
                  as.data.frame %>%
                  select(phenotype,description)
  
# rg PNA  
# import manually rg_PNA_5fac
rg_PNA <- rg_PNA_5cfa %>%
  mutate(Domain = replace(Domain, Domain=="skeletal", "Skeletal"),
         description=replace(description, description == 'Answered sexual history questions', 'Skip sexual history questions'),
         description=replace(description, description == 'Overall health rating', 'Low self-rated health'),
         description=replace(description, description == 'Qualifications: College or University degree', 'College or University degree'),
         description=replace(description, description == 'Qualifications: None of the above', 'No qualification'),
         description=replace(description, description == 'Qualifications: A levels/AS levels or equivalent', 'A/AS levels or equivalent'),
         description=replace(description, description == 'Average total household income before tax', 'Low total household income'),
         description=replace(description, description == 'Intelligence', 'Intelligence'),
         description=replace(description, description == 'Educational Attainment', 'Higher Educational Attainment')) %>%
  rbind(c("1111",as.numeric(0.7256),as.numeric(9999),as.numeric(3.66e-125), "I don't know", "Cognitive")) %>%
  mutate_at(vars("p", "rg"),funs(as.numeric))

p1 <- ggplot(rg_PNA, aes(x=rg, y=-log10(p), colour=Domain)) +
  geom_point(aes(size=-log10(p),colour = Domain)) +
  theme_bw() +
  xlim(c(-.65,.75)) +
  xlab('Genetic correlation PNA phenotype with other traits') + ylab("-Log10(p-value)") +
  theme (axis.text=element_text(size=11), 
         axis.title=element_text(size=14,face="bold"),
         plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold")) +
geom_text_repel(data = subset(rg_PNA, -log10(p)>45 & abs(rg)>0.45),  # | abs(rg)>0.6
                  aes(label=description), 
                  colour="black",
                   nudge_x      = 0.05,
                  direction    = "y",
                   hjust        = 0) +
  ggtitle("a") +
  guides(size=FALSE, colour=guide_legend(ncol=1,override.aes = list(size=4)))

# rg IDK    
# import dataset manually
rg_IDK <- rg_gwas_IDK_4fac_metric %>%
  select(p2,rg,z,p) %>%
  rename(phenotype = p2) %>%
  mutate(phenotype =gsub('"',"",gsub('^.|.$', '', gsub('^.*pheno\\s*|\\s*ldsc.*$', '', phenotype)))) %>%
  left_join(heritable_var, by = c("phenotype" = "phenotype")) %>%
  rbind(c("1111",as.numeric(0.7256),as.numeric(9999),as.numeric(3.66e-125), "Prefer not to answer", "Cognitive")) %>%
  mutate_at(vars("p", "rg"),funs(as.numeric)) %>%
  cbind(rg_PNA$Domain) %>%
  rename(Domain = `rg_PNA$Domain`) %>%
  mutate(description= rg_PNA$description,
         description=replace(description, description == 'Answered sexual history questions', 'Skip sexual history questions'),
         description=replace(description, description == 'Overall health rating', 'Low self-rated health'),
         description=replace(description, description == 'Average total household income before tax', 'Low total household income')) 

rg_IDK %>% subset(-log10(p)>45 & abs(rg)>0.45)
rg_PNA %>% subset(-log10(p)>45 & abs(rg)>0.45)

p2 <- ggplot(rg_IDK, aes(x=rg, y=-log10(p), colour=Domain)) +
  geom_point(aes(size=-log10(p),colour = Domain)) + 
  theme_bw() +
  xlim(c(-.65,.75)) +
  xlab('Genetic correlation IDK phenotype with other traits') + ylab("-Log10(p-value)") +
  theme (axis.text=element_text(size=11), 
         axis.title=element_text(size=14,face="bold"),
         plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold")) +
  geom_text_repel(data = subset(rg_IDK, -log10(p)>60 & abs(rg)>0.45),  # | abs(rg)>0.6
                  aes(label=description), 
                  colour="black",
                  nudge_x      = 0.05,
                  direction    = "y",
                  hjust        = 0) +
  guides(size=FALSE, colour=guide_legend(ncol=1,override.aes = list(size=4))) +
  ggtitle("b")

#common.legend = TRUE
g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
  }
mylegend<-g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                               p2 + theme(legend.position="none"),
                               nrow=2),
                   mylegend, nrow=2,ncol=2,heights=c(10, 1),
             widths=c(4.8/6, 1.2/6))

# comparison rg psychiatric idk and pna
r <- rg_PNA %>% 
  filter(Domain %in% c("Neurological", "Psychiatric", "Cognitive")) %>%
  select(rg) %>%
  as.data.frame %>%
  na.omit 

e <- rg_IDK %>% 
  filter(Domain %in% c("Neurological", "Psychiatric", "Cognitive")) %>%
  select(rg) %>%
  as.data.frame %>%
  na.omit 

# how many items are there in the rg traits
all <- gsub("_.*", "", rg_IDK$phenotype)
few <- gsub("(?:[^.]+\\.){1}([^.]+).*", "\\1", pna$rowname)

sum(few %in% all)/109*100




rg_PNA <- read_csv("rg_PNA_5cfa.csv", 
                   col_types = cols(X1 = col_skip())) %>%
  mutate(Domain = replace(Domain, Domain=="skeletal", "Skeletal"))     



# read in file to make volcano plot with unadjusted rg
pna_idk <- read.csv("pna_idk_comparison.csv")
names(pna_idk$Traits[c(6,31, 17, 13)]) <- c("Educational Attainment", "Loneliness", "Low self rated health", " Schizophrenia")
levels(pna_idk$Traits)[c(16,22,36,30)] <- c("Educational Attainment", "Loneliness", "Low self rated health", " Schizophrenia")


# WARNING (no correct colnames): pna adj it's in fact unadj, for idk it's correct
ggplot(pna_idk, aes(x=rg_pna_unadj, y=-log10(pvalue_rg_pna_unadj))) +
  geom_point(aes(x=rg_pna_unadj, y=-log10(pvalue_rg_pna_unadj)))

limits <- c(-100,85)
breaks <- seq(limits[1], limits[2], by=20)

p1 <- ggplot(pna_idk, aes(x=rg_pna_adj, y=-log10(pvalue_rg_pna_adj), size=1.8)) +
  geom_point() +
  xlim(limits=c(-.55,.55)) +
  ylim(limits=c(0,90)) +
  theme_bw() +
  xlab("Genetic correlation PNA") + ylab("-Log10(p-value)") +
  theme (legend.position = "none",
         axis.text=element_text(size=11), 
         axis.title=element_text(size=14,face="bold")) +
  geom_text_repel(data = subset(pna_idk, -log10(pvalue_rg_pna_adj)>20 | -log10(pvalue_rg_pna_adj) > 9.459 & -log10(pvalue_rg_pna_adj) < 9.46),
                  aes(rg_pna_adj,-log10(pvalue_rg_pna_adj),label=Traits),
                  nudge_y = 10,
                  direction = "x")

p2 <- ggplot(pna_idk, aes(x=rg_idk_unadj, y=-log10(pvalue_rg_idk_unadj),  size=1.8)) +
  geom_point() +
  theme_bw() +
  xlim(limits=c(-.55,.55)) +
  ylim(limits=c(0,90)) +
  xlab("Genetic correlation IDK") + ylab("-Log10(p-value)") +
  theme (legend.position = "none",
         axis.text=element_text(size=11), 
         axis.title=element_text(size=14,face="bold")) +
  geom_text_repel(data = subset(pna_idk, -log10(pvalue_rg_idk_unadj)>22 | -log10(pvalue_rg_idk_unadj) > 0.24 & -log10(pvalue_rg_idk_unadj) < 0.25),
                  aes(rg_pna_adj,-log10(pvalue_rg_idk_unadj),label=Traits),
                  nudge_y =-1,
                  direction = "x")

grid.arrange(p1, p2, ncol=2, top = textGrob("Genetic correlation IDK/PNA with other traits",
                                            gp=gpar(fontsize=20,font=2)))


################################################################
#           FACTOR LOADINGS PLOT   EXPLORATORY
################################################################
#https://rpubs.com/danmirman/plotting_factor_analysis

### PNA ----> first run the other plot (see last mutate #here)

fit_PNA <- fa(r= PNA_pruned2, nfactors=5, fm="ols", 
              n.obs=nrow(PNA_pruned2),rotate="biquartimin", 
              residuals = TRUE, cor = "mixed")
fit_PNA <- readRDS(file = "fit_PNA.rds")
loadings_pna <- unclass(fit_PNA$loadings) %>%
  set_colnames(c("General Factor", "SocioeconomicStatus", "Health", "Ethnicity", "Psychiatric")) %>%
  as.data.frame %>%
  mutate(labels = c("Smoking status","Ethnic background","Current accomodation","Current employment status","Qualifications",
                    "Physical activity", "Frequency of visits", "Social activities", "Time spent outdoors/watching TV", "Time spent driving/using PC",
                    "Speeding on motorway", "Mobile phone use", "Sleep quality", "Chronotype", "Snoring",
                    "Vegetables intake", "Food and alcohol intake", "Never eat processed food", "Major dietary changes", "Person-specific information",
                    "Childhood sunburn and facial ageing", "Skin color", "Depression/neuroticism feelings", "Unenthusiasm/tenseness feelings", "Seen a psychiatrist",
                    "Able to confide", "Mouth/teeth problems", "Overall health status", "Long-standing illness/infirmity", "Disability/mobility allowance",
                    "Eye problems", "Frequency of sunlamp use", "Falls in the last year", "Illness/injury in last 2 years", "Pain experienced recently",
                    "Hearth and lungs problems", "Dietary supplements")) %>%
  arrange(desc(Ethnicity),desc(SocioeconomicStatus),desc(Psychiatric), desc(Health)) %>%
  mutate(labels = factor(labels, levels = loadings_pna_cfa$labels))  #here

loadings.m <- melt(loadings_pna, id="labels", 
                   c("General Factor", "SocioeconomicStatus", "Health", "Ethnicity", "Psychiatric"),
                   variable.name="Factor", value.name="Loading") %>%
  mutate(Factor = factor(Factor, levels = c("General Factor", "Ethnicity",
                                            "SocioeconomicStatus", "Psychiatric", "Health")))

p1 <- ggplot(loadings.m, aes(reorder(labels, desc(labels)), abs(Loading), fill=Loading)) + 
  facet_wrap(~ Factor, nrow=1) + #place the factors in separate facets
  geom_bar(stat="identity") + #make the bars
  coord_flip() + #flip the axes so the test names can be horizontal  
  ylab("Loading Strength") + #improve y-axis label
  theme_bw(base_size=10) +
  scale_fill_gradient2(name = "Loading", low = "blue", high = "darkgreen", mid = "white", 
                       midpoint = 0, space = "Lab", breaks=c(-1,-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1),
                       limits=c(-1,1)) +
  theme(legend.key.size = unit(2.5, "cm"),
        legend.key.width = unit(.8, "cm"),
        axis.text.y = element_text(size = 7.5),
        plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold")) +
  ggtitle("a") +
  xlab("")

##### IDK

fit_IDK <- fa(r= IDK_pruned_sum, nfactors=4, fm="ols", 
              n.obs=nrow(IDK_pruned_sum), rotate="biquartimin", cor = "mixed") # oblique
fit_IDK <- readRDS(file = "fit_IDK.rds")

loadings_idk <- unclass(fit_IDK$loadings) %>%
  set_colnames(c("General Factor", "Psychiatric", "Lifestyle", "Health")) %>%
  as.data.frame %>%
  mutate(labels = c("Ethnic background", "Cooking/heating system", "Physical Activities", "Time spent outdoors", "Time spent driving/using PC", 
                    "Speeding on motorway", "Frequency of sunlamp use", "Mobile phone use", "Frequency of visits", "Getting up in the morning",
                    "Narcolepsy", "Variation in diet", "Chronotype", "Snoring", "Vegetables intake",
                    "Fish/meat intake", "Dairy type", "Cereal and Coffee/Tea intake", "Time spent watching TV/sleeping",
                    "Hair colour", "Time at current address", "Breastfed as a baby",
                    "Comparative body/height size", "Childhood sunburn occasions", "Facial ageing", "Skin colour",
                    "Ease of skin tanning", "Mood swings", "Sensitivity feelings", "Anxious feelings", 
                    "Worry after embarrassment", "Risk taking", "Irritability", "Nervous/tense feelings", "Loneliness and isolation",
                    "Guilty feelings", "Unenthusiasm/tenseness feelings", "Frequency of tiredness/lethargy", "Seen a psychiatrist",
                    "Able to confide", "Overall health rating", "Weight change in last year", "Wheeze in the chest", "Chest pain",
                    "Bowel cancer screening", "Diabetes diagnosed by MD", "Cancer diagnosed by MD", "Fractured/broken bones", "Taking prescription medications",
                    "Medication for pain relief", "Hearing difficulty/problems", "Long-standing illness/infirmity", 
                    "Medical conditions diagnosed", 
                    "Disability/mobility allowance", "Adopted as a child", "Use of UV protection")) %>%
  arrange(desc(Psychiatric), desc(Lifestyle),desc(Health)) %>%
  mutate(labels = factor(labels, levels = loadings_cfa_idk$labels))

loadings.n <- melt(loadings_idk, id="labels", 
                   c("General Factor", "Psychiatric", "Lifestyle", "Health"),
                   variable.name="Factor", value.name="Loading") %>%
  mutate(Factor = factor(Factor, levels = c("General Factor", "Psychiatric", "Lifestyle", "Health")))

ggplot(loadings.n, aes(reorder(labels, desc(labels)), abs(Loading), fill=Loading)) + 
  facet_wrap(~ Factor, nrow=1) + #place the factors in separate facets
  geom_bar(stat="identity") + #make the bars
  coord_flip() + #flip the axes so the test names can be horizontal  
  ylab("Loading Strength") + #improve y-axis label
  theme_bw(base_size=10) +
  scale_fill_gradient2(name = "Loading", low = "blue", high = "darkgreen", mid = "white", 
                       midpoint = 0, space = "Lab", breaks=c(-1,-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1),
                       limits=c(-1,1)) +
  theme(legend.key.size = unit(2.5, "cm"),
        legend.key.width = unit(.8, "cm"),
        axis.text.y = element_text(size = 7.5),
        plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold")) +
  ggtitle("b") +
  xlab("")


# combine in the same plot
#common.legend = TRUE
g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}
mylegend<-g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=2),
             mylegend, nrow=2,ncol=2, heights=c(32, 1), 
             widths=c(9/10, 1/10))

################################################################
#           FACTOR LOADINGS PLOT   CONFIRMATORY
################################################################
#https://rpubs.com/danmirman/plotting_factor_analysis

### PNA
fit_cfa_PNA <- readRDS(file = "fit_cfa_PNA.rds")
#inspect(fit_cfa_PNA,what="std")$lambda

loadings_pna <- inspect(fit_cfa_PNA,what="std")$lambda %>%
  set_colnames(c("General Factor", "SocioeconomicStatus", "Health", "Ethnicity", "Psychiatric")) %>%
  as.data.frame %>%
  mutate(labels = c("Smoking status","Ethnic background","Current accomodation","Current employment status","Qualifications",
                    "Physical activity", "Frequency of visits", "Social activities", "Time spent outdoors/watching TV", "Time spent driving/using PC",
                    "Speeding on motorway", "Mobile phone use", "Sleep quality", "Chronotype", "Snoring",
                    "Vegetables intake", "Food and alcohol intake", "Never eat processed food", "Major dietary changes", "Person-specific information",
                    "Childhood sunburn and facial ageing", "Skin color", "Depression/neuroticism feelings", "Unenthusiasm/tenseness feelings", "Seen a psychiatrist",
                    "Able to confide", "Mouth/teeth problems", "Overall health status", "Long-standing illness/infirmity", "Disability/mobility allowance",
                    "Eye problems", "Frequency of sunlamp use", "Falls in the last year", "Illness/injury in last 2 years", "Pain experienced recently",
                    "Hearth and lungs problems", "Dietary supplements")) %>%
  arrange(desc(Ethnicity),desc(SocioeconomicStatus),desc(Psychiatric), desc(Health)) %>%
  mutate(labels = factor(labels, levels = labels))

loadings.m <- melt(loadings_pna, id="labels", 
                   c("General Factor", "SocioeconomicStatus", "Health", "Ethnicity", "Psychiatric"),
                   variable.name="Factor", value.name="Loading")  %>%
  mutate(Factor = factor(Factor, levels = c("General Factor", "Ethnicity",
                                              "SocioeconomicStatus", "Psychiatric", "Health")))

ggplot(loadings.m, aes(reorder(labels, desc(labels)), Loading, fill=Loading)) +  # aes(labels, abs(Loading), fill=Loading)
  facet_wrap(~ Factor, nrow=1) + #place the factors in separate facets
  geom_bar(stat="identity") + #make the bars
  coord_flip() + #flip the axes so the test names can be horizontal  
  ylab("Loading Strength") + #improve y-axis label
  theme_bw(base_size=10) +
  scale_fill_gradient2(name = "Loading", low = "blue", high = "darkgreen", mid = "white", 
                       midpoint = 0, space = "Lab", breaks=c(-1,-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1),
                       limits=c(-1,1)) +
  theme(legend.key.size = unit(2.5, "cm"),
        legend.key.width = unit(.8, "cm"),
        axis.text.y = element_text(size = 7.5),
        plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold")) +
  ggtitle("a") +
  xlab("")

##### IDK
fit_cfa_IDK <- readRDS(file = "fit_cfa_IDK.rds")
#https://stats.stackexchange.com/questions/330177/calculating-variance-explained-by-factors-after-exploratory-factor-analysis-with

loadings_cfa_idk <- unclass(inspect(fit_cfa_IDK,what="std")$lambda) %>%
  set_colnames(c("General Factor", "Psychiatric", "Lifestyle", "Health")) %>%
  as.data.frame %>%
  mutate(labels = c("Ethnic background", "Cooking/heating system", "Physical Activities", "Time spent outdoors", "Time spent driving/using PC", 
                    "Speeding on motorway", "Frequency of sunlamp use", "Mobile phone use", "Frequency of visits", "Getting up in the morning",
                    "Narcolepsy", "Variation in diet", "Chronotype", "Snoring", "Vegetables intake",
                    "Fish/meat intake", "Dairy type", "Cereal and Coffee/Tea intake", "Time spent watching TV/sleeping",
                    "Hair colour", "Time at current address", "Breastfed as a baby",
                    "Comparative body/height size", "Childhood sunburn occasions", "Facial ageing", "Skin colour",
                    "Ease of skin tanning", "Mood swings", "Sensitivity feelings", "Anxious feelings", 
                    "Worry after embarrassment", "Risk taking", "Irritability", "Nervous/tense feelings", "Loneliness and isolation",
                    "Guilty feelings", "Unenthusiasm/tenseness feelings", "Frequency of tiredness/lethargy", "Seen a psychiatrist",
                    "Able to confide", "Overall health rating", "Weight change in last year", "Wheeze in the chest", "Chest pain",
                    "Bowel cancer screening", "Diabetes diagnosed by MD", "Cancer diagnosed by MD", "Fractured/broken bones", "Taking prescription medications",
                    "Medication for pain relief", "Hearing difficulty/problems", "Long-standing illness/infirmity", 
                    "Medical conditions diagnosed", 
                    "Disability/mobility allowance", "Adopted as a child", "Use of UV protection")) %>%
  arrange(desc(Psychiatric), desc(Lifestyle),desc(Health)) %>%
  mutate(labels = factor(labels, levels = labels))

loadings.n <- melt(loadings_cfa_idk, id="labels", 
                   c("General Factor", "Psychiatric", "Lifestyle", "Health"),
                   variable.name="Factor", value.name="Loading") %>%
  mutate(Factor = factor(Factor, levels = c("General Factor", "Psychiatric", "Lifestyle", "Health")))


ggplot(loadings.n, aes(reorder(labels, desc(labels)), abs(Loading), fill=Loading)) + 
  facet_wrap(~ Factor, nrow=1) + #place the factors in separate facets
  geom_bar(stat="identity") + #make the bars
  coord_flip() + #flip the axes so the test names can be horizontal  
  ylab("Loading Strength") + #improve y-axis label
  theme_bw(base_size=10) +
  scale_fill_gradient2(name = "Loading", low = "blue", high = "darkgreen", mid = "white", 
                       midpoint = 0, space = "Lab", breaks=c(-1,-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1),
                       limits=c(-1,1)) +
  theme(legend.key.size = unit(2.5, "cm"),
        legend.key.width = unit(.8, "cm"),
        axis.text.y = element_text(size = 7.5),
        plot.title = element_text(hjust =-.045, vjust=2.5, face = "bold")) +
  ggtitle("b") +
  xlab("")


# combine in the same plot
#common.legend = TRUE
g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}
mylegend<-g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=2),
             mylegend, nrow=2,ncol=2, heights=c(32, 1), 
             widths=c(9/10, 1/10))
